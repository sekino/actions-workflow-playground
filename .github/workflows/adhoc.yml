name: adhoc terraform execute

on:
  issue_comment:
    types: [ created ]
  pull_request:
    branches:
      - main
    types: [closed]

env:
  PLAN_ROLE_MAP: '{ "dev": "arn:aws:iam:::role/terraformPlan", "stg": "arn:aws:iam:::role/terraformPlan" }'
  APPLY_ROLE_MAP: '{ "dev": "arn:aws:iam:::role/terraformApply", "stg": "arn:aws:iam:::role/terraformApply" }'
  # bitwarden: Mongo Atlas API Key terraform
  ATLAS_API_KEY_ID_MAP: '{ "dev": "6193", "stg": "619" }'
  FLAG: 'true'

jobs:
  check-adhoc-label:
    if: ${{ contains(github.event.issue.labels.*.name, 'adhoc execute') || contains(github.event.pull_request.labels.*.name, 'adhoc execute') }}
    runs-on: ubuntu-22.04
    steps:
      - name: Check adhoc label
        run: echo "adhoc execute"
    env:
      DEMO: ${{ (github.event.comment && 'hoge') || format('{0}-fuga', github.event.issue.number) }}

  get-target-comment:
    needs: check-adhoc-label
    if: ${{ (github.event.comment.body && startsWith(github.event.comment.body, '/target')) || github.event.pull_request.merged == true }}
    outputs:
      target_comment: ${{ steps.when-pr-comment.outputs.target_comment || steps.when-pr-merge.outputs.target_comment }}
    runs-on: ubuntu-22.04
    steps:
      - name: When PR comment
        id: when-pr-comment
        if: ${{ github.event.comment.body && startsWith(github.event.comment.body, '/target') }}
        uses: actions/github-script@v6.3.0
        with:
          result-encoding: string
          script: |
            const { COMMENT } = process.env
            core.setOutput('target_comment', COMMENT)
        env:
          COMMENT: ${{ github.event.comment.body }}

      - name: When PR merge
        id: when-pr-merge
        if: github.event.pull_request.merged == true
        uses: actions/github-script@v6.3.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              per_page: 100,
            })
            
            // 最新のtargetコメントを使用する
            const targetComment = comments.reverse().find(comment => {
              return comment.body.startsWith("/target")
            })
            
            if (targetComment) {
              core.setOutput('target_comment', targetComment.body)
            } 

  create-context:
    needs: get-target-comment
    if: ${{ needs.get-target-comment.outputs.target_comment }}
    outputs:
      contexts: ${{ steps.create-context.outputs.contexts }}
      env: ${{ steps.create-context.outputs.env }}
      plan_role: ${{ fromJson(env.PLAN_ROLE_MAP)[steps.create-context.outputs.env] }}
      apply_role: ${{ fromJson(env.APPLY_ROLE_MAP)[steps.create-context.outputs.env] }}
      atlas_api_key_id: ${{ fromJson(env.ATLAS_API_KEY_ID_MAP)[steps.create-context.outputs.env] }}
    runs-on: ubuntu-22.04
    steps:
      - name: Create context
        shell: bash {0}
        id: create-context
        run: |
          target_lines=$(echo -e "${TARGET_COMMENT}" | grep -E -w 'plan|plan-destroy' | sort | uniq)
          target_env=$(echo -e "${target_lines}" | grep -E -ow 'dev|stg|prd|sbg' | sort | uniq)
          
          if [[ -z "${target_lines}" ]]; then
            echo "targets is empty"
            exit 1
          fi
          
          if [[ -z "${target_env}" ]]; then
            echo "cannot find env in target" >&2
            exit 1
          fi
          
          target_env_num=$(echo -e "${target_env}" | wc -l | tr -d ' ')
          if [[ "${target_env_num}" != "1" ]]; then
            echo "two or more env in target" >&2
            exit 1
          fi

          : # { "target_path": <path>, "mode": <plan or plan-destroy> } の配列を組み立てる
          context_array=()
          while IFS= read -r target_line; do
            mode="$(echo ${target_line} | cut -d ' ' -f1 | tr -d ' ')"
            target_path="$(echo ${target_line} | cut -d ' ' -f2 | tr -d ' ' | sed -e "s%/$%%g" | sed -e "s/[\r\n]\+//g" )"
            context="{ \"target_path\": \"${target_path}\", \"mode\": \"${mode}\" }"
            context_array+=("${context}")
          done <<< "${target_lines}" 
          : # ref: https://stackoverflow.com/questions/26808855/how-to-format-a-bash-array-as-a-json-array
          context_json=$(jq --compact-output --null-input '$ARGS.positional' --args -- "${context_array[@]}")

          echo "target_env: ${target_env}"
          echo "target_lines: ${target_lines}"
          echo "contexts: ${context_json}"

          echo "contexts=${context_json}" >> $GITHUB_OUTPUT
          echo "env=${target_env}" >> $GITHUB_OUTPUT
        env:
          TARGET_COMMENT: ${{ needs.get-target-comment.outputs.target_comment }}

  call-plan:
    needs: create-context
    if: ${{ (github.event.comment.body && startsWith(github.event.comment.body, '/target')) }}
    strategy:
      matrix:
        state_dir: ${{ fromJson(needs.create-tf-execute-context.outputs.targets) }}
    uses: ./.github/workflows/plan.yml
    with:
      role-to-assume: ${{ needs.create-context.outputs.plan_role }}
      work-dir: ${{ fromJson(matrix.context).target_path }}
      env: ${{ needs.create-context.outputs.env }}
      atlas-api-key-id: ${{ needs.create-context.outputs.atlas_api_key_id }}
      adhoc_destroy_mode: ${{ fromJson(matrix.context).mode == 'plan-destroy' }}
    secrets:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      MODULE_TOKEN: ${{ secrets.MABOT_TOKEN }}

  call-apply:
    needs: create-context
    if: github.event.pull_request.merged == true
    strategy:
      matrix:
        state_dir: ${{ fromJson(needs.create-tf-execute-context.outputs.targets) }}
    uses: ./.github/workflows/apply.yml
    with:
      role-to-assume: ${{ needs.create-context.outputs.apply_role }}
      work-dir: ${{ fromJson(matrix.context).target_path }}
      env: ${{ needs.create-context.outputs.env }}
      atlas-api-key-id: ${{ needs.create-context.outputs.atlas_api_key_id }}
    secrets:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      MODULE_TOKEN: ${{ secrets.MABOT_TOKEN }}
