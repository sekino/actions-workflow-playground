name: Download artifact

on:
  workflow_call:
    inputs:
      repo:
        type: string
        required: false
        default: ${{ github.repository }}
      workflow:
        description: "artifactをuploadしたworkflowファイル名"
        type: string
        required: true
      branch:
        description: "artifactをuploadしたworkflowを実行したbranch"
        type: string
      name:
        description: "artifact名"
        type: string
        required: true
      pr:
        description: "Pull Requestの番号"
        type: number
      path:
        description: "artifactを保存するpath"
        type: string
        required: true


jobs:
  download-artifact:
    runs-on: ubuntu-22.04
    steps:
      - name: Run script
        uses: actions/github-script@v6.3.3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
#          refs: https://github.com/dawidd6/action-download-artifact/blob/master/main.js
          script: |
            const fs = require('fs')
            const pathname = require('path')
            try {              
              const [owner, repo] = '${{ inputs.repo }}'.split("/")
              const name = '${{ inputs.name }}'
              const workflow = '${{ inputs.workflow }}'
              const pr = '${{ inputs.pr }}'
              const branch = '${{ inputs.branch }}'
              const path = '${{ inputs.path }}'
            
              core.info(`==> Repository: ${owner}/${repo}`)
              core.info(`==> Artifact name: ${name}`)
              core.info(`==> Local path: ${path}`)
              core.info(`==> Workflow name: ${workflow}`)
              core.info(`==> PR: ${pr}`)
            
              let commit
              if (pr) {
                  const pull = await github.rest.pulls.get({
                      owner: owner,
                      repo: repo,
                      pull_number: pr,
                  })
                  const commit = pull.data.head.sha
              }
              
              if (commit) {
                  core.info(`==> Commit: ${commit}`)
              }
              
              if (branch) {
                  branch = branch.replace(/^refs\/heads\//, "")
                  core.info(`==> Branch: ${branch}`)
              }
              
              for await (const runs of github.paginate.iterator(github.rest.actions.listWorkflowRuns, {
                  owner: owner,
                  repo: repo,
                  workflow_id: workflow,
                  ...(branch ? { branch } : {}),
              }
              )) {
                  for (const run of runs.data) {
                      if (commit && run.head_sha != commit) {
                          continue
                      }
                      if ('success' != run.conclusion && 'success' != run.status) {
                          continue
                      }
              
                      let artifacts = await github.rest.actions.listWorkflowRunArtifacts({
                          owner: owner,
                          repo: repo,
                          run_id: run.id,
                      })
                      if (artifacts.data.artifacts.length == 0) {
                          continue
                      }
                      
                      const artifact = artifacts.data.artifacts.find((artifact) => {
                          return artifact.name == name
                      })
                      if (!artifact) {
                          continue
                      }
                      
              
                      runID = run.id
                      core.info(`==> (found) Run ID: ${runID}`)
                      core.info(`==> (found) Run date: ${run.created_at}`)
                      break
                  }
                  if (runID) {
                      break
                  }
              }
              
              if (!runID) {
                  core.setFailed('no matching workflow run found with any artifacts?')
                  return
              }
              
              let artifacts = await github.paginate(github.rest.actions.listWorkflowRunArtifacts, {
                  owner: owner,
                  repo: repo,
                  run_id: runID,
              })
              
              filtered = artifacts.filter((artifact) => {
                  return artifact.name == name
              })
              if (filtered.length == 0) {
                  core.info(`==> (not found) Artifact: ${name}`)
                  core.info('==> Found the following artifacts instead:')
                  for (const artifact of artifacts) {
                      core.info(`\t==> (found) Artifact: ${artifact.name}`)
                  }
              }
              artifacts = filtered
              core.setOutput("artifacts", artifacts)
              
              if (artifacts.length == 0) {
                  core.setFailed('no matching workflow run found with any artifacts?')
                  return
              }
              
              core.setOutput("found_artifact", true)
              
              for (const artifact of artifacts) {
                  core.info(`==> Artifact: ${artifact.id}`)
                  core.info(`==> Downloading: ${artifact.name}.zip`)
              
                  let zip
                  try {
                      zip = await github.rest.actions.downloadArtifact({
                          owner: owner,
                          repo: repo,
                          artifact_id: artifact.id,
                          archive_format: "zip",
                      })
                  } catch (error) {
                      if (error.message === "Artifact has expired") {
                          core.setFailed('no downloadable artifacts found (expired)')
                          return 
                      } else {
                          throw new Error(error.message)
                      }
                  }
              
              
                  io.mkdirP(path)
                  fs.writeFileSync(`${pathname.join(path, artifact.name)}.zip`, Buffer.from(zip.data), 'binary')                  
              }
            } catch (error) {
                core.setOutput("found_artifact", false)
                core.setOutput("error_message", error.message)
                core.setFailed(error.message)
            }
      - name: Unzip
        run: |
          unzip ${{ inputs.name }}.zip
          ls 
