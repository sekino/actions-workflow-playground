name: terraform plan workflow

on:
  workflow_call:
    inputs:
      role-to-assume:
        required: true
        type: string
      work-dir:
        required: true
        type: string
      env:
        required: true
        type: string
      atlas-api-key-id:
        required: true
        type: string
        description: 'Atlas API KeyのID.これは機密情報ではありません'
      remove_state:
        type: boolean
        default: false
        description: 'stateのディレクトリを削除している場合にtrueにする'
      adhoc_destroy_mode:
        type: boolean
        default: false
        description: 'アドホック実行でリソースをdestroyする場合にtrueにする'

    secrets:
      SLACK_BOT_TOKEN:
        required: true
      MODULE_TOKEN:
        required: true
        description: 'MatchingAgent orgのterraform moduleをインストールするためのtoken'

permissions:
  contents: read
  id-token: write
  pull-requests: write
  actions: read

jobs:
  terraform-plan:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3.0.2

    - name: Set Config for Module
      run: git config --global url."https://${TOKEN}:x-oauth-basic@github.com/MatchingAgent".insteadOf "ssh://git@github.com/MatchingAgent"
      env:
        TOKEN: ${{ secrets.MODULE_TOKEN }}

    - name: Get terraform version from .tool-versions
      id: get-terraform-version
      run: |
        TF_VERSION=$(cat ./env/${ENV}/.tool-versions | awk -F' ' '{ if($1 == "terraform") print $2 }')
        echo "TF_VERSION=${TF_VERSION}" >> $GITHUB_OUTPUT
      env:
        ENV: ${{ inputs.env }}

    - name: Get tflint version from .tool-versions
      id: get-tflint-version
      run: |
        TFLINT_VERSION=$(cat .tool-versions | awk -F' ' '{ if($1 == "tflint") print $2 }')
        echo "TFLINT_VERSION=${TFLINT_VERSION}" >> $GITHUB_OUTPUT

    - name: Setup terraform
      uses: hashicorp/setup-terraform@v2.0.0
      with:
        terraform_version: ${{ steps.get-terraform-version.outputs.TF_VERSION }}

    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v2.0.1
      with:
        tflint_version: v${{ steps.get-tflint-version.outputs.TFLINT_VERSION }}

    - name: Init TFLint
      run: tflint --init

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1.7.0
      with:
        role-to-assume: ${{ inputs.role-to-assume }}
        aws-region: ap-northeast-1

    - name: Create working directory when remove_state
      if: inputs.remove_state
      run: |
        mkdir -p ${{ inputs.work-dir }}
        : # terraform initするためにversions.tfのみ復元する
        git checkout origin/${{ github.base_ref }} -- ${{ inputs.work-dir }}/versions.tf

    - name: Run terraform init
      id: init
      run: terraform init
      working-directory: ${{ inputs.work-dir }}

    - name: Get tfsec version from .tool-versions
      id: get-tfsec-version
      run: |
        TFSEC_VERSION=$(cat .tool-versions | awk -F' ' '{ if($1 == "tfsec") print $2 }')
        echo "TFSEC_VERSION=${TFSEC_VERSION}" >> $GITHUB_OUTPUT

    - name: Run tfsec
      uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
      with:
        tfsec_version: v${{ steps.get-tfsec-version.outputs.TFSEC_VERSION }}
        github_token: ${{ github.token }}
        soft_fail_commenter: true
        working_directory: ${{ inputs.work-dir }}

    - name: Install Public IP Lib
      id: gip
      uses: haythem/public-ip@v1.3

    # refs: https://www.notion.so/cyberagent/terraform-Atlas-API-Key-Lambda-018fcb08ee82487fbe364a391220e294
    - name: Create atlas API key accessList entry
      run: |
        aws lambda invoke --function-name ${{ inputs.env }}-control-atlas-api-key-access-list \
        --region ap-northeast-1 --log-type Tail \
        --cli-binary-format raw-in-base64-out --payload '{ "mode": "create", "apiKeyId": "${{ inputs.atlas-api-key-id }}", "ip": "${{ steps.gip.outputs.ipv4 }}" }' \
        --query 'LogResult' response.json | tr -d '"' | base64 -d

    # refs: https://blog.testdouble.com/posts/2021-12-07-elevate-your-terraform-workflow-with-github-actions/
    - name: Run terraform plan
      id: plan
      run: |
        export AWS_DEFAULT_REGION=ap-northeast-1
        export TF_CLI_ARGS_plan="-input=false"
        export TF_IN_AUTOMATION="1"
        export TF_VAR_management_tags="{ Owner=\"tapple\", management_tag_tf_modifier=\"runner\",ManagedBy=\"tapple-${{ inputs.env }}-terraform\" }"
        export TF_VAR_product_env=${{ inputs.env }}
        
        plan_option="-no-color"
        if [[ "${{ inputs.adhoc_destroy_mode }}" = "true" ]]; then
          plan_option="${plan_option} -destroy"
        fi
        terraform plan ${plan_option} -out=tfplan \
        && terraform show -no-color tfplan
      continue-on-error: true
      working-directory: ${{ inputs.work-dir }}


    - name: Create artifact name prefix
      id: create-artifact-prefix
      if: steps.plan.outcome == 'success'
      run: |
        prefix=$(echo ${{ inputs.work-dir }} | tr '/' '-')
        echo "PREFIX=${prefix}" >> $GITHUB_OUTPUT

    - name: Upload plan file to artifact
      if: steps.plan.outcome == 'success'
      uses: actions/upload-artifact@v3.1.1
      with:
        name: ${{ steps.create-artifact-prefix.outputs.PREFIX }}-tfplan
        path: ${{ inputs.work-dir }}/tfplan
        retention-days: 5
        if-no-files-found: error

    # destroyの場合は、apply実行時に versions.tf だけ復元したいので artifact に保存しておく
    - name: Upload versions file to artifact
      if: inputs.remove_state
      uses: actions/upload-artifact@v3.1.1
      with:
        name: ${{ steps.create-artifact-prefix.outputs.PREFIX }}-versions.tf
        path: ${{ inputs.work-dir }}/versions.tf
        retention-days: 5
        if-no-files-found: error

    # refs: https://github.com/robburger/terraform-pr-commenter/issues/6
    - name: Format output of terraform plan
      id: format
      if: steps.plan.outcome == 'success'
      run: |
        echo '${{ steps.plan.outputs.stdout }}' \
        | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' | sed 's/`/\\`/g' > plan.txt
        PLAN=$(cat plan.txt)
        echo "PLAN<<EOF" >> $GITHUB_ENV
        echo "${PLAN:0:65300}" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        summary=$(echo '${{ steps.plan.outputs.stdout }}' | grep -e 'Plan:' -e 'No changes')
        if [[ $summary == *"No changes"* ]]; then
          echo "SUMMARY_ICON=:information_source:" >> $GITHUB_ENV
        else
          echo "SUMMARY_ICON=:warning:" >> $GITHUB_ENV
        fi
        echo "SUMMARY=${summary}" >> $GITHUB_OUTPUT

    - name: Format output of terraform plan
      if: steps.plan.outcome == 'failure'
      run: |
        echo '${{ steps.plan.outputs.stderr }}' \
        | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt
        PLAN=$(cat plan.txt)
        echo "PLAN<<EOF" >> $GITHUB_ENV
        echo "${PLAN:0:65300}" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        echo "SUMMARY=$(echo "terraform plan fails with error")" >> $GITHUB_OUTPUT
        echo "SUMMARY_ICON=:rotating_light:" >> $GITHUB_ENV

    - name: Remove atlas API key accessList entry
      if: always()
      run: |
        aws lambda invoke --function-name ${{ inputs.env }}-control-atlas-api-key-access-list \
        --region ap-northeast-1 --log-type Tail \
        --cli-binary-format raw-in-base64-out --payload '{ "mode": "remove", "apiKeyId": "${{ inputs.atlas-api-key-id }}", "ip": "${{ steps.gip.outputs.ipv4 }}" }' \
        --query 'LogResult' response.json | tr -d '"' | base64 -d

    # refs: https://github.com/hashicorp/setup-terraform#usage
    - name: Comment output of terraform plan to PR
      uses: actions/github-script@v6.3.0
      if: ${{ github.event_name == 'pull_request' || github.event_name == 'issue_comment' }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes("${{ inputs.work-dir }}")
          })
          const output = `#### Terraform Plan 📖
          ${{ env.SUMMARY_ICON }}\`${{ steps.format.outputs.SUMMARY }}\`
          <details><summary>Show Plan</summary>

          \`\`\`diff\n
          ${{ env.PLAN }}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workspace Name: \`${{ inputs.env }}\`, State: \`${{ inputs.work-dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }

    - name: Fail when plan fail
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Unset Config
      if: always()
      run: git config --unset --global url."https://${TOKEN}:x-oauth-basic@github.com/MatchingAgent".insteadOf
      env:
        TOKEN: ${{ secrets.MODULE_TOKEN }}
